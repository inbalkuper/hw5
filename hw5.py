from typing import Union, Tuple
import pathlib
import numpy as np
import pandas as pd
import matplotlib.pyplot  as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except TypeError:
            print("Error: Input should be a string or pathlib")
            raise
        if not self.data_fname.exists():
            raise ValueError("The file you've inputted doesn't exist")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        df = self.data
        df = df.dropna(subset=['age']) # drop rows where age is NaN
        bins = np.linspace(0,100,11) #an array according to the bin edges given
        _,ax = plt.subplots()
        hist,bin_edges,_=ax.hist(df['age'],bins=bins) #hist is the values of the histogram bins and bin_edges is the array of bin edges
        return hist, bin_edges
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        df = self.data
        df = df.dropna(subset=["email"]) #drop if email is null value
        df["@_loc"] = df["email"].str.find("@") #create temp col of first @ location
        df["._loc"] = df["email"].str.find(".") #create temp col of first . location
        df["mail_len"] = df["email"].str.len()-1 #create temp col of index of last char in email
        df = df.drop(df[df["email"].str.count("@")>1].index) #drop if more than one @
        df = df.drop(df[(df["@_loc"]<1)].index) #drop if no @ or in beginning
        df = df.drop(df[df["@_loc"]==df["mail_len"]].index) #drop if @ in the end
        df = df.drop(df[(df["._loc"]<1)].index)  #drop if no . or in beginning
        df = df.drop(df[df["._loc"]==df["mail_len"]].index) #drop if . in the end
        df = df.drop(df[df["._loc"]==(df["@_loc"]+1)].index) #drop if . immediately after @
        df.drop(['@_loc',"._loc","mail_len"], inplace=True, axis=1) #remove temp columns
        qf = df.reset_index()
        return qf
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
       """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.
       
       Returns
       -------
       df : pd.DataFrame
       The corrected DataFrame after insertion of the mean grade
       arr : np.ndarray
       Row indices of the students that their new grades were generated
       """
       df = self.data
       grades = df[["q1","q2","q3","q4","q5"]]
       arr =  [index for index, row in grades.iterrows() if row.isnull().any()]
       grades = grades.apply(lambda row: row.fillna(row.mean()), axis=1)
       df[["q1","q2","q3","q4","q5"]] = grades
       return (df, arr)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
       """Calculates the average score of a subject and adds a new "score" column
       with it.

       If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
       score should be NA. Otherwise, the score is simply the mean of the other grades.
       The datatype of score is UInt8, and the floating point raw numbers should be
       rounded down.

       Parameters
       ----------
       maximal_nans_per_sub : int, optional
           Number of allowed NaNs per subject before giving a NA score.

       Returns
       -------
       pd.DataFrame
           A new DF with a new column - "score".
       """
       df = self.data
       grades = df[["q1","q2","q3","q4","q5"]]
       df["score"] = (grades.mean(axis=1).astype("uint8").astype("UInt8"))
       bad_indices = grades.isna().sum(axis=1) > maximal_nans_per_sub
       df.loc[bad_indices,"score"] = pd.NA
       return df
